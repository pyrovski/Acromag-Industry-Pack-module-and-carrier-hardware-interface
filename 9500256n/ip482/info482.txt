











                                    Acromag, Inc.
                                  30765 S.Wixom Road
				    P.O. Box 437
                              Wixom, Michigan 48393-7037

                                Phone: (248)295-0310
                                 FAX: (248)624-9234

                               Linux Software Library
                  Information File for the IP482/3/4 Counter/Timers
                                        V2.0
                                      10/01/03




               The  information  in this manual is subject to  change
               without notice.   Acromag,  Inc.  makes no warranty of
               any kind with regard to this material and accompanying
               software,  including, but not limited to , the implied
               warranties  of  merchantability  and  fitness  for   a
               particular   purpose.    Acromag,   Inc.   assumes  no
               responsibility for any errors that may appear in  this
               manual and accompanying software.

               See GPL.txt.






























	1. Overview

	This  "information"  file  contains a description of  the library
	programs used for the  following  Acromag Industrial  I/O Boards:

	IP482, 10, 16-bit TTL Counter/Timers
	IP483,  5, 16-bit TTL and 2, 16-bit RS485/RS422 Counter/Timers
	IP484,  5, 16-bit RS485/RS422

	2. Introduction

	The  software for the IP482/3/4  I/O board is  implemented  as  a
	library  of "C" functions.   This will  make  it     possible  to
	utilize the board by simply linking  the user's  code	with  the
	provided   library   and   making   function   calls   for   each
	"command"  to be accomplished.  Most of the function  calls  will
	require  a few parameters or the address of a parameter block  to
	be  passed.   The  parameters will  include  the  board  address,
	configuration  information,  data storage addresses,  and  status
	information. These functions accomplish the following tasks:

	     - Configuration
	     - Read Status
	     - Read Input & Write Output
	     - Trigger I/O

	Also  included  is  a demonstration program which shows  how  the
	library  routines are used.   It is  a  helpful  program  to  use
	when first installing the board, checking  it  out, and  learning
	how it works.
	In this document, the term "channel" is used to describe  one  of
	10 counter/timers.  Channels are numbered 1 through 10.

	3. List of Files

	The library  software  for  each  Acromag  I/O  board  is  in	a
	correspondingly named subdirectory on  the  supplied  media.  The
	files  which  make up the library for the  IP482/3/4  boards  are
	stored in the subdirectory named "ip482".
	There  are two types of program files provided.   Library program
	files are the files which make up the "library".  Support program
	files contain example programs which show how to use the library.

	3.1 Library Program Files

	The  following  files are included on the supplied  media  and
	make up the actual "library" software.

	     ip482.h   - include file
	     cnfg482.c - configure
	     isr482.c  - interrupt handler
	     rpnt482.c - read an input point
	     rprt482.c - read an input port
	     wpnt482.c - write an output point
	     wprt482.c - write an output port





				   1






	3.2 Support Program Files

	The  following files are included on the supplied media.   The
	test program demonstrates how  the library  programs may be used.

	     drvr482.c - test program to  demonstrate  library  programs.
	     apc8620.h - include file for carrier support.
	     apc8620.c - source file for carrier support.


	4. Software Installation

	It  is strongly advised that the user make a backup copy  of  the
	distribution  media  and  that  the  original   media  be  stored
	in a safe place.

	The  software is installed by simply copying the library files to
	the  user's  work directory and compiling and  linking  with  the
	user's application program.

	5. Hardware Installation

	For proper installation of each Acromag I/O board the user should
	refer to the appropriate user's manual.

	6. Usage of the Library and Support Programs

	The  software is installed  by copying the supplied files to your
	work  directory and compiling  and linking  with your application
	program.
	It  is recommended that the user read the  User's Manual for  the
	board  and  thoroughly  familiarize themselves with the hardware.
	For a new user to become familiar with the Acromag Library it may
	be  most  "straight forward"  to proceed in the following manner:

























				   2







             (a) Build and load the Acromag device driver module.

                 i)   See  the  information  file  in  the device driver
                 directory "/home/ip/dev8620/info.txt" for information
                 about building and loading the device driver module.

             (b) Build and execute the Acromag Library Demonstration.

                  i)   Copy the Acromag Library routines from the "Ip482"
                  directory of the source media to a new directory  under
                  /home/ip/ip482.

                  ii)  Copy   the  carrier   support  routines  from  the
                  "carrier" directory  of the  source  media  to  a  new
                  directory  under   /home/ip/carrier. 

                  iii) Use the makefile to build the project.

                  iv)  Launch  the  debugger,  "gdb a.out"  use  the  run 
                  command start the program.

                  v)   The  Acromag  Demonstration  program  menu  should
                  appear  on  the  target processor's  console  terminal.





	The following menu is displayed:

	       IP482/3/4 Counter/Timer Library Demonstration  Rev. A

                1. Exit this Program
                2. Set Board Base Address
                3. Set IP Slot Letter
                4. Examine/Change Current Counter
                5. Set Up Configuration Parameters
                6. Configure Control Register
                7. N/A
                8. N/A
                9. Software Trigger Control
               10. Display Counter Control Registers
               11. Display Read Back Registers
               12. Examine/Change Counter Constant
               13. Write Counter Constant Register
               14. Stop Counter
               15. N/A
               16. Read Module I.D.
               17. Digital I/O

              Select:







				   3







	To perform  counter/timer functions, follow this sequence of main
	menu selections:

	    Select  2: To set the carrier board base address.
	    Select  3: To set the IP slot letter.
	    Select  4: To examine/change current counter.
	    Select  5: To setup configuration parameters.
	    Select  6: To write configuration to the board.
	    Select 12: To examine/change counter constant registers.
	    Select 13: To write counter constant values to board.
	    Select  9: To trigger the counter(s).
















                       Current Counter 1 Configuration Parameters

                       1. Return to Previous Menu
                       2. Board Pointer:         C1000000
                       3. Counter Mode:          2
                       4. Output Polarity:       0
                       5. Input A Polarity:      0
                       6. Input B Polarity:      0
                       7. Input C Polarity:      0
                       8. Clock Source/Special:  0
                       9. Debounce:              0
                      10. Interrupt Vector:      C0
                      11. Interrupt Enable:      1
                      12. Carrier Clock Speed:   0

 
	    Select  6: To  configure  the board using the information  in
		       the Configuration Block.
	    Select 12: To examine/change counter constant registers.
	    Select 13: To write counter constant values to board.
	    Select  9: To trigger the counter(s).
	    Select 16: To display status.









				   4









	6.1 Explanation of the Main Demonstration Menu

	The following is an explanation of each menu selection:

	     1. Exit this Program

	     This  selection disables interrupts and  causes execution to
	     be returned to the shell.

	     2. Set Carrier Base Address

	     This  selection  allows the user  to set the  address of the
	     carrier board being used.

	     3. Set IP Slot Letter

	     This  selection  allows the user to set or change  the  slot
	     letter of the IP module being used.   The value entered here
	     will  automatically  be  entered in  the  Configuration  and
	     Status Block structures.

	     4. Examine/Change Current Counter

	     This selection allows the user to choose one of ten counters
	     as the current counter being used.

	     5. Set Up Configuration Parameters

	     This  selection will cause the Configuration Block Parameter
	     Menu to be displayed.  Through that menu it will be possible
	     to  enter values into the various structure members  of  the
	     Configuration Block structure.   See Section 6.2 for details
	     on the Configuration Block Parameter Menu which follows.

	     6. Configure Control Register

	     This menu selection will pass a pointer to the Configuration
	     Block structure.     Information in the Configuration  Block
	     is written to the board.

	     7. N/A





	     8. N/A









				   5







	     9. Software Trigger Control

	     This command is used to issue a software trigger to a single
	     channel or to simultaneously trigger multiple channels.

	     10. Display Counter Control Registers

	     This  command is used to display the contents of the counter
	     control registers.


	     11. Display Read Back Registers

	     This command is used to display the "Read Back Registers"
	     when the board is in one of the counter/timer modes.

	     12. Examine/Change Counter Constant

	     This command is used to display the current contents of the
	     counter constant registers and to change values, if needed.

	     13. Write to Counter Constant Register

	     This  command  is  used  write  new  values  to  the counter
	     constant registers.

	     14. Stop Counter

	     This command is used to stop  all activity  for the  current
	     channel.   Note  that  this  command  does  not  change  the
	     configuration block member but  rather  does  a read/modify/
	     write directly to the board  register. This  way  the  board
	     can be easily reconfigured by using selection 6.

	     15. N/A







	     16. Read Module I.D.

	     This command reads and displays the module I.D.  information.



	     17. Digital I/O

	     This selection allows the user to read or write the  digital
	     I/O bits.   Note: The number of Digital I/O bits varies with
	     model number, see  instruction  manual for more information.





				   6





	6.2  Explanation of the Configration Block Parameter Menu

	This menu  is  displayed  when  the  user  selects  the  "Set  Up
	Configuration	Parameters "   menu    item    from    the   Main
	Demonstration  Menu.  Through  the Configuration Block  Parameter
	Menu it will be possible  for  the  user  to  enter  values  into
	the  Configuration  Block  structure.          Following  is  the
	"Set Up Configuration  Block  Parameters" menu.  All  numbers are
	displayed and entered in hexadecimal.

             Current Counter 1 Configuration Parameters

             1. Return to Previous Menu
             2. Board Pointer:         C1000000
             3. Counter Mode:          2
             4. Output Polarity:       0
             5. Input A Polarity:      0
             6. Input B Polarity:      0
             7. Input C Polarity:      0
             8. Clock Source/Special:  0
             9. Debounce:              0
            10. Interrupt Vector:      C0
            11. Interrupt Enable:      0
            12. Carrier Clock Speed:   0

	    Select:

	     (Note  that  the values in the menu will differ depending  on
	     your system.)


	     Following is an explanation of each menu selection:

	     1. Return to Previous Menu

	     This selection returns the user to the Main Menu.

	     2. Board Pointer

	     The  board  base  address is displayed,  however,  the  base
	     address  cannot  be  changed  through the Main Demonstration
	     Menu.

	     3. Counter Mode

	     This selection allows the user to enter a value corresponding
	     to one of 8 possible modes. They are:
                  0 - Disabled
                  1 - Quadrature Position
                  2 - Pulse Width Modulation
                  3 - Watchdog Timer
                  4 - Event Counter/Frequency Measurement 
                  5 - Input Pulse Width Measurement
                  6 - Input Period Measurement
                  7 - One-Shot Output Pulse





				   7






	     4. Output Polarity

	     This selection allows the  user to enter a  value that  sets
	     the output  polarity. A "0" in  this position  will set  the
	     output to an  active low  and a "1"  will be an active high.

	     5. Input A Polarity

	     This selection allows the  user to enter a  value that  sets
	     the input A polarity. They are:
                  0 - In A Polarity Disabled
                  1 - In A Polarity Active Low
                  2 - In A Polarity Active High

	     If the selected mode is QuadPosition the choices are as
	     follows:
                  1 - X1 Encoding
                  2 - X2 Encoding
                  3 - X4 Encoding

	     6. Input B Polarity

	     This selection allows the  user to enter a  value that  sets
	     the input B polarity. They are:
                  0 - In B Polarity Disabled
                  1 - In B Polarity Active Low
                  2 - In B Polarity Active High

	     If the selected mode is QuadPosition the choices are as
	     follows:
                  1 - In B Polarity Enabled

	     7. Input C Polarity

	     This selection allows the  user to enter a  value that  sets
	     the input C polarity. They are:
                  0 - In C Polarity Disabled
                  1 - In C Polarity Active Low
                  2 - In C Polarity Active High

	     If the selected mode is Watchdog an additional choice is:
                  3 - In C Polarity Gate-Off Control

	     If the selected mode is Event Counting an additional choice
	     is:
                  3 - In C Polarity Up/Down Control

	     If the selected mode is QuadPosition the choices are as
	     follows:
                  1 - A = 0, B = 1
                  2 - A = 1, B = 0
                  3 - A = 1, B = 1
                  4 - A = 0, B = 0






				   8





	     8. Clock Source/Special

	     This selection allows the user to select from 6 different
	     clock sources (from 8MHZ carrier). They are as follows:
                  0 - Internal 0.5MHz Clock
                  1 - Internal 1MHz Clock
                  2 - Internal 2MHz Clock
                  3 - Internal 4MHz Clock
                  4 - Internal 8MHz Clock
                  5 - External Clock

	     If the selected mode is QuadPosition the choices are as
	     follows:
	         0 - No Interrupt
	         1 - Interrupt when counter equals Counter Constant A
	         2 - Interrupt on Index and reload on Index
	         3 - Interrupt on Index (no reload)

             If the selected mode is Event Counting/Frequency Measurement
             the choices are as follows:
		 0 - Event Counting
	       7 - Frequency Measurement

	     9. Debounce

	     This selection  allows the user to either  enable or disable
	     input debounce.  A "0" will disable  debounce and a "1" will
	     enable debounce.

	     10. Interrupt Vector

	     This  selection  allows  the  user  the  exception  vector.

	     11. Interrupt Enable

	     This  selection  allows the user to enter a  value  for  the
	     Interrupt Enable  bit.  A "1" will  allow interrupts  to  be
	     generated by the corresponding counter/timer. A "0" disables
	     interrupts for the corresponding counter/timer.

	     12. Carrier Clock Speed

	     This  selection  allows  the user to enter a value  for  the
	     carrier clock speed.


	7. Description of Library Programs.

	Following  are descriptions of the programs and files which  make
	up the library.

	ip482.h - This module contains  the  definitions  and  structures
	used by the library.

	cnfgct.c -  This  file contains the majority of the rountines that
	are  used  to  configure  the board.  Following  is a list  of the 
	routines along with a brief description of each.



				   9





	IPSTAT ReadCounter() - Read the value of a counter.
	The  current  value of  the counter  is  placed  at  the  address
	specified by val.   Valid values for "counter" are 1 through 10
        Returns parameter out of range error if the counter value is
        invalid.  Returns  invalid pointer error if val is NULL, else
        returns success.

	   calling sequence:

	    ReadCounter(ptr, counter, val);

	     where:
		  ptr  - (structure  pointer)  This is a pointer  to  the
		  Configuration Block structure.

		  counter - (int)currently set counter

		  val - (word pointer) this points to the address of val


	IPSTAT GetCounterConstant() - Read the counter  constant value.
        The  current  value  of  the  counter  constant register is placed
        at the address specified by val.   Valid values "counter" are 1
        through 10. Returns parameter out of range error if the counter
        value is  invalid. Returns invalid pointer  error if  val is NULL,
        else returns success.

	  calling sequence:

	    GetCounterConstant(ptr, counter, val);

	     where:
		  ptr  - (structure  pointer)  This is a pointer  to  the
		  Configuration Block structure.

		  counter - (int)currently set counter.

		  val - (word pointer)this points to the address of val.


	IPSTAT SetCounterConstant() - Set  the  counter  constant.  Valid
	values for "counter" are 1 through 10.   Returns parameter out of
        range error if the counter value is invalid, else returns success.

	  calling sequence:

	    SetCounterConstant(ptr, counter, val);

	     where:
		  ptr  - (structure  pointer)  This is a pointer  to  the
		  Configuration Block structure.

		  counter - (int)currently set counter.

		  val - (word)this is the value to be stored.





				   10






	IPSTAT WriteCounterConstant() -  Write  a  value to  the  counter
	constant register.   Valid values for "counter" are 1 through 10
        Returns parameter out of range error if the counter value is
        invalid, else returns success.

	  calling sequence:

	    WriteCounterConstant(ptr, counter);

	     where:
		  ptr  - (structure  pointer)  This is a pointer  to  the
		  Configuration Block structure.

		  counter - (int)currently set counter.


	IPSTAT GetMode() - The  current  value is  placed  at the address
	specified by  mode.  Valid values for "counter" are 1 through 10
        Returns parameter out of range  error  if  the  counter value  is
        invalid.    Returns Invalid pointer if 'mode' is NULL, else
	returns success.

	  calling sequence:

	    GetMode(ptr, counter, mode);

	     where:
		  ptr  - (structure  pointer)  This is a pointer  to  the
		  Configuration Block structure.

		  counter - (int)currently set counter.

		  mode - (byte pointer)this points to the address of mode.


	IPSTAT SetMode(); - Valid values for "counter" are 1 through 10.
        Returns  parameter out of range error if the 'counter' or 'mode'
        value is invalid, else returns success.

	  calling sequence:

	    SetMode(ptr, counter, mode);

	     where:
		  ptr  - (structure  pointer)  This is a pointer  to  the
		  Configuration Block structure.

		  counter - (int)currently set counter.

		  mode - (byte)this is the mode to be stored.









				   11





	IPSTAT GetDebounce() - The current value is placed at the address
	specified by debounce.   Valid values for "counter" are 1 through
        10.   Returns parameter out of range error  if the  counter value
        is invalid.   Returns Invalid pointer if 'debounce' is NULL, else
        returns  success.

	  calling sequence:

	    GetDebounce(ptr, counter, debounce);

	     where:
		  ptr  - (structure  pointer)  This is a pointer  to  the
		  Configuration Block structure.

		  counter - (int)currently set counter.

		  debounce - (BOOL pointer)this points to the address  of
		  debounce.


	IPSTAT SetDebounce() - Valid values  for "counter" are  1 through
        10.   Valid values for "debounce" are 0 and 1. Returns  parameter
        out of range error if the 'counter' or 'debounce' value is
        invalid, else  returns success.

	  calling sequence:

	    Setdebounce(ptr, counter, debounce);

	     where:
		  ptr  - (structure  pointer)  This is a pointer  to  the
		  Configuration Block structure.

		  counter - (int)currently set counter.

		  debounce - (BOOL)this is the value to be stored.

	IPSTAT GetInterruptEnable() - The  current value is placed at the
	address specified by enable.  Valid values for "counter" are 1
	through  10.   Returns parameter  out of  range error  if the
 	counter  value is invalid. Returns Invalid pointer if 'enable'
        is NULL, else returns success.

	  calling sequence:

	    GetInterruptEnable(ptr, counter, enable);

	     where:
		  ptr  - (structure  pointer)  This is a pointer  to  the
		  Configuration Block structure.

		  counter - (int)currently set counter.

		  enable - (BOOL pointer) this  points to the address  of
		  enable.





				   12







	IPSTAT SetInterruptEnable() - Bit 0 set in  this register enables
	the corresponding counter  interrupt.   Valid values for "counter"
        are 11 through 10. Returns parameter out of range error if  the '
        counter' or 'enable' values are invalid.

	  calling sequence:

	    SetInterruptEnable(ptr, counter, enable);

	     where:
		  ptr  - (structure  pointer)  This is a pointer  to  the
		  Configuration Block structure.

		  counter - (int)currently set counter.

		  enable - (BOOL)this is the value to be stored.




	IPSTAT GetInterruptVector  -  Get  the  value  of  the  interrupt
	vector  register.  The  current  value is  placed at  the address
	specified by  vector.  Returns  Invalid  pointer if  'vector'  is
	NULL, else returns success.

	  calling sequence:

	    GetInterruptVector(ptr, vector);

	     where:
		  ptr  - (structure  pointer)  This is a pointer  to  the
		  Configuration Block structure.

		  *vector - (byte)is a place to put the retrieved value



	IPSTAT SetInterruptVector - Set the value of the interrupt vector
	register. Returns success.

	  calling sequence:

	    SetInterruptVector(ptr, vector);

	     where:
		  ptr  - (structure  pointer)  This is a pointer  to  the
		  Configuration Block structure.

		  vector - (byte)value to be stored









				   13






	IPSTAT GetClockSource() -  Valid  values for "counter" are 1
	through 10.   Returns parameter out of range error if the
        'counter' value  is  invalid. The current value is placed at
        the address specified by 'source'. Returns invalid pointer
        if 'source' is NULL.

	  calling sequence:

	    GetClockSource(ptr, counter, source);

	     where:
		  ptr  - (structure  pointer)  This is a pointer  to  the
		  Configuration Block structure.

		  counter - (int)currently set counter.

		  source - (byte pointer) this points  to the  address of
		  source.

	IPSTAT SetClockSource() -  Valid  values for "counter" are 1
	through 10.   Returns parameter out of range error if the
        'counter'  value  is invalid. Returns  parameter  out of
        range error  if the  source  value is invalid else returns
        success.

	  calling sequence:

	    SetClockSource(ptr, counter, source);

	     where:
		  ptr  - (structure  pointer)  This is a pointer  to  the
		  Configuration Block structure.

		  counter - (int)currently set counter.

		  source - (byte)this is the value to be stored.


	IPSTAT StopCounter() - disables a counter timer.    Valid values
	for "counter" are 1 through 10.   Returns parameter out of range
        error  if the counter value is invalid else returns success.

	  calling sequence:

	    StopCounter(ptr, counter);

	     where:
		  ptr  - (structure  pointer)  This is a pointer  to  the
		  Configuration Block structure.

		  counter - (int)currently set counter.








				   14






	IPSTAT GetOutputPolarity() - Bit 0 set in a register enables the
	active  LOW output polarity. Valid values for "counter" are 1
	through  10.   Returns 	parameter out of range error if the
        'counter'  value  is invalid. The current value is placed at the
        address specified by polarity. 	Returns  invalid  pointer  if
        'polarity' is  NULL, else  returns success.

	  calling sequence:

	    GetOutputPolarity(ptr, counter, polarity);

	     where:
		  ptr  - (structure  pointer)  This is a pointer  to  the
		  Configuration Block structure.

		  counter - (int)currently set counter.

		  polarity - (BOOL pointer)this points to the address  of
		  polarity.

	IPSTAT SetOutputPolarity() - Bit 0 set in a register  enables the
	active LOW output  polarity. Valid  values for "counter" are 1
	through 10.    Returns parameter out of range error if the
        'counter' or  polarity  values 	are invalid, else returns success.

	  calling sequence:

	    SetOutputPolarity(ptr, counter, polarity);

	     where:
		  ptr  - (structure  pointer)  This is a pointer  to  the
		  Configuration Block structure.

		  counter - (int)currently set counter.

		  polarity - (BOOL)this is the value to be stored.

	IPSTAT GetInputAPolarity() - Valid values for  "counter"  are 1
	through 10. Returns parameter out of range error if the 'counter'
        value is  invalid.  The  current  value  is  placed  at  the
        address  specified   by polarity.  Returns invalid  pointer  if
        'polarity' is NULL, else returns success.

	  calling sequence:

	    GetInputAPolarity(ptr, counter, polarity);

	     where:
		  ptr  - (structure  pointer)  This is a pointer  to  the
		  Configuration Block structure.

		  counter - (int)currently set counter.

		  polarity - (byte pointer)points to address of polarity.





				    15





	IPSTAT SetInputAPolarity() - Set the value of  input A  polarity
	register.  Valid values for "counter" are 1 through 10.
        Returns parameter out of range error if the 'counter' value  is
        invalid  else  returns  success. Returns  Invalid  pointer  if
        'polarity'  is  NULL, else success.

	  calling sequence:

	    SetInputAPolarity(ptr, counter, polarity);

	     where:
		  ptr  - (structure  pointer)  This is a pointer  to  the
		  Configuration Block structure.

		  counter - (int)currently set counter.

		  polarity - (byte)this is the value to be stored.


	IPSTAT GetInputBPolarity() - Valid values for  "counter"  are 1
	through 10. Returns parameter out of range error if the 'counter'
        value is  invalid. The  current  value  is  placed  at  the
        address  specified   by polarity.  Returns invalid  pointer  if
        'polarity' is NULL, else returns success.

	  calling sequence:

	    GetInputBPolarity(ptr, counter, polarity);

	     where:
		  ptr  - (structure  pointer)  This is a pointer  to  the
		  Configuration Block structure.

		  counter - (int)currently set counter.

		  polarity - (byte pointer)points to address of polarity.

	IPSTAT SetInputBPolarity() - Set the value of  input B  polarity
	register.  Valid values for "counter" are 1 through 10.
        Returns parameter out of range error if the 'counter' value  is
        invalid  else  returns  success. Returns  Invalid  pointer  if
        'polarity'  is  NULL, else success.

	  calling sequence:

	    SetInputBPolarity(ptr, counter, polarity);

	     where:
		  ptr  - (structure  pointer)  This is a pointer  to  the
		  Configuration Block structure.

		  counter - (int)currently set counter.

		  polarity - (byte)this is the value to be stored.






				    16







	IPSTAT GetInputCPolarity() - Valid values for  "counter"  are 1
	through 10. Returns parameter out of range error if the 'counter'
        value is  invalid. The  current  value  is  placed  at  the
        address  specified   by polarity.  Returns invalid  pointer  if
        'polarity' is NULL, else returns success.

	  calling sequence:

	    GetInputCPolarity(ptr, counter, polarity);

	     where:
		  ptr  - (structure  pointer)  This is a pointer  to  the
		  Configuration Block structure.

		  counter - (int)currently set counter.

		  polarity - (byte pointer)points to address of polarity.

	IPSTAT SetInputCPolarity() - Set the value of  input C  polarity
	register.  Valid values for "counter" are 1 through 10.
        Returns parameter out of range error if the 'counter' value  is
        invalid  else  returns  success. Returns  Invalid  pointer  if
        'polarity'  is  NULL, else  returns success.

	  calling sequence:

	    SetInputCPolarity(ptr, counter, polarity);

	     where:
		  ptr  - (structure  pointer)  This is a pointer  to  the
		  Configuration Block structure.

		  counter - (int)currently set counter.

		  polarity - (byte)this is the value to be stored.

	IPSTAT DisableInterrupt() - disables timer interrupts.    Valid
	values for  "counter"  are 1 through 10.  Returns parameter out
        of range error if the counter value is invalid else returns
        success.

	  calling sequence:

	    DisableInterrupt(ptr, counter);

	     where:
		  ptr  - (structure  pointer)  This is a pointer  to  the
		  Configuration Block structure.

		  counter - (int)currently set counter.








				   17






	IPSTAT StartCounter()- Starts one counter timer.    Valid values
	for  "counter"  are 1 through 10.   Returns parameter out of
        range error if the counter value is invalid else returns success.

	  calling sequence:

	    StartCounter(ptr, counter);

	     where:
		  ptr  - (structure  pointer)  This is a pointer  to  the
		  Configuration Block structure.

		  counter - (int)currently set counter.

	IPSTAT StartSimultaneousCounters() -  Starts  one  counter,   any
	combination, or all counter timers. Bit mask of counters to start
	bit9 ... bit0 Returns success.

	   calling sequence:

	    StartSimultaneousCounters(ptr, mask);

	     where:
		  ptr  - (structure  pointer)  This is a pointer  to  the
		  Configuration Block structure.

		  mask - (byte)contains mask for which counters to trigger.


	IPSTAT ConfigureCounterTimer() -  This  routine  will  build  the
	control word from the configuration  block  and then write it into
	the appropriate register. Valid values for "counter"  are 1
	through 10. Returns  parameter out of range error if the counter
        value is invalid.

	  calling sequence:

	    ConfigureCounterTimer(ptr, counter);

	     where:
		  ptr  - (structure  pointer)  This is a pointer  to  the
		  Configuration Block structure.

		  counter - (int)currently set counter.















				   18







	8. Description of Support Programs

	Following  is  a  description of the support  files  and  program
	modules  which  provide  examples  for  the  use  of  the library
	programs.

	     drvr482.c - test program to  demonstrate  library  programs.
	     apc8620.h - include file for carrier support.
	     apc8620.c - source file for carrier support.


	drvr482.c  -  This  is a program which demonstrates the  usage  of
	the library modules.   This program is menu driven and allows the
	user to become familiar with  the ip482  board  and  the  library
	software.   The user may,  through menu  selections,   configure,
	read from, and write to the board.










































				   19

