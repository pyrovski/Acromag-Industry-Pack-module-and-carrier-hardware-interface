











                                    Acromag, Inc.
                                  30765 S.Wixom Road
                                    P.O. Box 437
                              Wixom, Michigan 48393-7037

                                Phone: (248)295-0310
                                 FAX: (248)624-9234

                               Linux Software Library
                          Information File for the IP480 Board
                                        V2.0
                                      04/19/02




               The  information  in this manual is subject to  change
               without notice.   Acromag,  Inc.  makes no warranty of
               any kind with regard to this material and accompanying
               software,  including, but not limited to , the implied
               warranties  of  merchantability  and  fitness  for   a
               particular   purpose.    Acromag,   Inc.   assumes  no
               responsibility for any errors that may appear in  this
               manual and accompanying software.

               See GPL.txt.































	1. Overview

	This  "information"  file  contains a description of  the library
	programs used for the  following  Acromag  Industrial  I/O Board:

	     IP480 Counter/Timer Board

	2. Introduction

	The  software  for  the  IP480  Input  board  is  implemented  as
	a library of "C" functions.  This will  make  it     possible  to
	utilize the board by simply linking  the user's  code	with  the
	provided   library   and   making   function   calls   for   each
	"command"  to be accomplished.  Most of the function  calls  will
	require  a few parameters or the address of a parameter block  to
	be  passed.   The  parameters will  include  the  board  address,
	configuration  information,  data storage addresses,  and  status
	information. These functions accomplish the following tasks:

	     - Configuration
	     - Read Status and ID
	     - Read Input
	     - Trigger I/O

	Also  included  is  a demonstration program which shows  how  the
	library routines are used.  It is also a helpful program  to  use
	when first installing the board, checking  it  out, and  learning
	how it works.

	In this document, the term "channel" is used to describe one of 2
	or 6 channels depending on the model that was purchased. Channels
	are numbered 1 and 2 or 1 through 6.


	3. List of Files

	The library  software  for  each  Acromag  I/O  board  is  in	a
	correspondingly named subdirectory on the supplied media.  The
	files  which  make up the library for the  IP480 board are stored
	in the subdirectory named "IP480".

	There  are two types of program files provided.   Library program
	files are the files which make up the "library".  Support program
	files contain example programs which show how to use the library.


	3.1 Library Program Files

	The  following  files are included on the supplied  media  and
	make up the actual "library" software.

	     ip480.h   - include file
	     cnfg480.c - configure
	     rmid480.c - read status,  ID,  and determines  channel count
	     isr480.c  - interrupt handler




				   1









	3.2 Support Program Files

	The  following files are included on the supplied media.   The
	test program demonstrates how  the library  programs may be used.


	     drvr480.c - test program to  demonstrate  library  programs.
	     apc8620.h - include file for carrier support.
	     apc8620.c - source file for carrier support.


	4. Software Installation

	It  is strongly advised that the user make a backup copy  of  the
	distribution  media  and  that  the  original   media  be  stored
	in a safe place.

	The  software is installed by simply copying the library files to
	the  user's  work directory and compiling and  linking  with  the
	user's application program.


	5. Hardware Installation

	For proper installation of each Acromag I/O board the user should
	refer to the appropriate user's manual.


	6. Usage of the Library and Support Programs

	The  software is installed  by copying the supplied files to your
	work  directory and compiling  and linking  with your application
	program.

	It  is recommended that the user read the  User's Manual for  the
	board  and  thoroughly  familiarize themselves with the hardware.
	For a new user to become familiar with the Acromag Library it may
	be  most  "straight forward"  to proceed in the following manner:

 
















				   2







             (a) Build and load the Acromag device driver module.

                 i)   See  the  information  file  in  the device driver
                 directory "/home/ip/dev8620/info.txt" for information
                 about building and loading the device driver module.

             (b) Build and execute the Acromag Library Demonstration.

                  i)   Copy the Acromag Library routines from the "Ip480"
                  directory of the source media to a new directory  under
                  /home/ip/ip480.

                  ii)  Copy   the  carrier   support  routines  from  the
                  "carrier" directory  of the  source  media  to  a  new
                  directory  under   /home/ip/carrier. 

                  iii) Use the makefile to build the project.

                  iv)  Launch  the  debugger,  "gdb a.out"  use  the  run 
                  command start the program.

                  v)   The  Acromag  Demonstration  program  menu  should
                  appear  on  the  target processor's  console  terminal.




	The following menu is displayed:

	       IP480 Library Demonstration  Rev. A

	       1. Exit this Program
	       2. Set Carrier Board Base Address
	       3. Set IP Slot Letter
	       4. Issue Software Reset to Board
	       5. Read Module I.D.
	       6. Examine/Change Current Counter
	       7. Set Up Configuration Parameters
	       8. Configure Control Register
	       9. N/A
	      10. N/A
	      11. Software Trigger Control
	      12. Display Counter Control Registers
	      13. Display Read Back Registers
	      14. Examine/Change Counter Constant
	      15. Write Counter Constant Register
	      16. Stop Counter
	      17. Disable Interrupt

              Select:








				   3






	To perform  counter/timer functions, follow this sequence of main
	menu selections:

	    Select  2: To set the carrier board base address.
	    Select  3: To set the IP slot letter.
	    Select  5: To read the board's ID and Status.
	    Select  6: To set channel number.
	    Select  7: To setup configuration parameters.
	    Select  8: To write configuration to the board.
	    Select 14: To modify the "Counter Constant Register".
	    Select 15: To write new "Counter Constant" value to board.
	    Select 11: To trigger the channel(s).

	NOTE: Selecting 14 immediately following 7, the  setup  will  be
	      written out to the  board during selection 8 and selection
	      15 can be omitted.(i.e. optional select sequence: 2, 3, 5,
	      6, 7, 14, 8 and 11)

	To use  the example  interrupt  routines  provided,  follow  this
	sequence of main menu selections:

	    Select  2: To set the carrier board base address.
	    Select  3: To set the IP module base address.
	    Select  5: To read the ID prom and determine proper channel count.
		   (uses the model number from the ID prom to determine count)
	    Select  6: To set channel number.
	    Select  9: To attach an interrupt exception handler.
	    Select  7: To  set  up the Configuration  Block  through  the
		       Configuration  Block  Parameter Menu.   This  Menu
		       will  allow  the  user to set  the  board  up  for
		       interrupts.  Following are typical values for  the
		       Configuration  Block  parameters  when  using  the
		       example interrupt handler routines:

			     Configuration Block Parameters

			  2. Board Pointer:        FFFF0000 (use your own)
			  3. Counter Mode:         0
			  4. Output Polarity:      0
			  5. Input/Event Polarity: 0
			  6. Trigger Source:       0
			  7. Counter Size:         0
			  8. Clock Source:         0
			  9. Watchdog Load:        0
			 10. Interrupt Vector:     C0
			 11. Interrupt Enable:     1
			 12. Debounce:             0

	    Select  8: To  configure  the board using the information  in
		       the Configuration Block.
	    Select 14: To modify the "Counter Constant Register".
	    Select 15: To write new "Counter Constant" value to board.
	    Select 11: To trigger channel(s).

	    Select  5: To read and clear "Event Status".




				   4










	6.1 Explanation of the Main Demonstration Menu

	The following is an explanation of each menu selection:

	     1. Exit this Program

	     This  selection disables interrupts and  causes execution to
             be returned to the shell.

	     2. Set Carrier Base Address

	     This selection allows the user to set address of the carrier
	     board being used.

	     3. Set IP Slot Letter

	     This  selection  allows the user to set or change  the  slot
	     letter of the IP module being used.   The value entered here
	     will  automatically  be  entered in  the  Configuration  and
	     Status Block structures.

	     4. Issue Software Reset to Board

	     This menu  selection  cause a  software  reset, clearing all
	     configuration  registers  and  stopping  any  I/O  activity.
	     However, all  configuration  information  will  be  saved in
	     software  and  the  board  can  be easily reconfigured using
	     selection 7 for each configured channel.

	     5. Read Status & ID Command

	     This  menu  selection will call the rmid480()  function  and
	     pass  a pointer  which points  to  the  Configuration  Block
	     structure. The  current  status information is read from the
	     board  and  written  into  this  structure  by the rmid480()
	     function.  The status information is  then displayed  by the
	     example program. This function also determines the number of
	     channels on the board and sets up that parameter.

	     6. Examine/Select Current Channel

	     This command is  used to  select  which  channel to  set up.

	     7. Set Up Configuration Block Parameters

	     This  selection will cause the Configuration Block Parameter
	     Menu to be displayed.  Through that menu it will be possible
	     to  enter values into the various structure members  of  the
	     Configuration Block structure.   See Section 6.2 for details
	     on the Configuration Block Parameter Menu which follows.





				   5





	     8. Configure Board Command

	     This  menu selection will call the  cnfg480()  function  and
	     pass  a  pointer  to  the  Configuration  Block   structure.
	     Information in the Configuration  Block  is  written  to the
	     board.

	     9. N/A

	     This  menu selection is not implemented at this time.



	     10. N/A

	     This  menu selection is not implemented at this time.


	     11. Software Trigger Control

	     This command is used to issue a software trigger to a single
	     channel or to simultaneously trigger multiple channels.

	     12. Display Counter Control Registers

	     This  command is used to display  the contents of the 2 or 6
	     counter control registers.

	     13. Display Read Back Registers

	     This command is used to display the "Read Back Registers"
	     when the board is in one of the counter/timer modes.

	     14. Examine/Change Counter Constant

	     This command is used to display the current contents of the
	     counter constant register and to change it if needed.

	     15. Write to Counter Constant Register

	     This command is used  write out  new values  to the  counter
	     constant register.

	     16. Stop Counter

	     This command is used to stop  all activity  for the  current
	     channel.Note that this command does not change configuration
	     block member but rather does a read/modify/write directly to
	     the  board  register. This  way  the  board  can  be  easily
	     reconfigred by using selection 7.

	     17. Disable Interrupts
	     This command is used to stop  all interrupt activity for the
	     current channel. Note that this  command does not change the
	     configuration  block  member  but rather  does a read/modify
	     /write directly to the board register.This way the board can
	     be easily reconfigured by using selection 7.



				   6





	6.2  Explanation of the Configration Block Parameter Menu

	This menu  is  displayed  when  the  user  selects  the  "Set  Up
	Configuration	Parameters "   menu    item    from    the   Main
	Demonstration  Menu.  Through  the Configuration Block  Parameter
	Menu it will be possible  for  the  user  to  enter  values  into
	the  Configuration  Block  structure.  The   Configuration  Block
	structure is  used  by the  cnfg480( ) function. Following is the
	"Set Up Configuration  Block  Parameters" menu.  All  numbers are
	displayed and entered in hexadecimal.

	     Configuration Block Parameters

	     1. Return to Previous Menu
	     2. Board Pointer:	     FFFF0000 (use your own)
	     3. Counter Mode:	      0
	     4. Output Polarity:      0
	     5. Input/Event Polarity: 0
	     6. Trigger Source:       0
	     7. Counter Size:	      0
	     8. Clock Source:	      0
	     9. Watchdog Load:	      0
	    10. Interrupt Vector:     C0
	    11. Interrupt Enable:     0
	    12. Debounce:             0

	    Select:

	     (Note  that  the values in the menu will differ depending  on
	     your system.)

	     Following is an explanation of each menu selection:

	     1. Return to Previous Menu

	     This selection returns the user to the Main Menu.

	     2. Board Pointer

	     The  board  base  address is displayed,  however,  the  base
	     address  can  only be changed through the Main Demonstration
	     Menu.   This  paramter  is  automatically	 updated  in  the
	     Configuration Block when the user selects  the  "Set   Board
	     Base  Address"  item  in	the  Main   Demonstration   Menu.

	     3. Counter Mode

	     This selection allows the user to enter a value corresponding
	     to one of 8 possible modes. They are:
	     0 - Disabled
	     1 - Output Pulse
	     2 - Output Square Wave
	     3 - Watchdog Timer
	     4 - Input Event Counter
	     5 - Input Pulse Width Measurement
	     6 - Input Period Measurement
	     7 - One-Shot Output Pulse



				   7







	     4. Output Polarity

	     This selection allows the  user to enter a  value that  sets
	     the output  polarity. A "0" in  this position  will set  the
	     output to an  active low  and a "1"  will be an active high.

	     5. Input/Event Polarity

	     This selection allows the  user to enter a  value that  sets
	     the input polarity.  A "0"  in  this  position will  set the
	     input active level to  low  and a "1"  will be a high active
	     level.

	     6. Trigger Source

	     This  selection  allows  the  user  to  select  from  either
	     internal  or  external  trigger sources.  The choices are as
	     follows:
		     0 - Internal
		     1 - External (Active Low) - High to Low(default)
		     2 - External (Active High)- Low to High

	     7. Counter Size

	     This  selection  allows  the  user  to  select either  16 or
	     32  bit  operation.  A "0"  in this  position will  set  the
	     channel to  16 bit  operation  while a "1"  will give 32 bit
	     operation.

	     8. Clock Source

	     This selection allows the user to select from 4 different
	     clock sources. They are as follows:
	     0 - Internal @ 1MHz
	     1 - Internal @ 4MHz
	     2 - Internal @ 8Mhz
	     3 - External @ up to 7Mhz

	     9. Watchdog Load

	     This selection allows the user to choose between internal or
	     external loading of the watchdog  timer. A  "0" will  select
	     internal loading while a "1" will select external loading.

	     10. Interrupt Vector Base

	     This  selection  allows  the user to enter a value  for  the
	     exception vector base.  The upper 4 bits of the  vector  are
	     user programmable.  The lower 4 bits are  generated  by  the
	     channel   requesting   service    on   the   IP480   module.








				   8





	     11. Interrupt Enable

	     This  selection  allows the user to enter a  value  for  the
	     Interrupt Enable  bit.  A "1" will  allow interrupts  to  be
	     generated by the corresponding counter/timer. A "0" disables
	     interrupts for the corresponding counter/timer. This affects
	     channels 1 - 6 only.

	     12. Debounce

	     This selection  allows the user to either  enable or disable
	     input debounce.  A "0" will disable  debounce and a "1" will
	     enable debounce.


	7. Description of Library Programs.

	Following  are descriptions of the programs and files which  make
	up the library.

	ip480.h - This module contains  the  definitions  and  structures
	used by the library.

	cnfg480.c -This file contains the majority of the rountines that
	are used to configure the board. Following is a list of the 
	routines along with a brief description of each.


	IPSTAT GetInterruptVector  -  Get  the  value  of  the  interrupt
	vector  register.  The  current  value is  placed at  the address
	specified by  vector.  Returns  Invalid  pointer if  'vector'  is
	NULL, else returns success.

	  calling sequence:

	    GetInterruptVector(ptr, vector);

	     where:
		  ptr  - (structure  pointer)  This is a pointer  to  the
		  Configuration Block structure.

		  *vector - (byte)is a place to put the retrieved value

	IPSTAT SetInterruptVector - Set the value of the interrupt vector
	register. Returns success.

	  calling sequence:

	    SetInterruptVector(ptr, vector);

	     where:
		  ptr  - (structure  pointer)  This is a pointer  to  the
		  Configuration Block structure.

		  vector - (byte)value to be stored





				   9





	IPSTAT ReadCounter() - Read the value of a 16 or 32 bit  counter.
	The  current  value of  the counter  is  placed  at  the  address
	specified  by val.  Valid values for "counter" are 2, 4 and 6 for
	32 bit. Valid values for "counter" are 1, 2, 3, 4, 5 and 6 for 16
	bit. Returns parameter out of range error if the counter value is
	invalid.  Returns  invalid  pointer  error  if val  is NULL, else
	returns success.

	   calling sequence:

	    ReadCounter(ptr, counter, val);

	     where:
		  ptr  - (structure  pointer)  This is a pointer  to  the
		  Configuration Block structure.

		  counter - (int)currently set counter

		  val - (ULONG pointer) this points to the address of val


	IPSTAT GetCounterConstant() - Read the value  of a 16  or 32  bit
	counter constant. The  current  value  of  the  counter  constant
	register is placed at  the address specified by val. Valid values
	for  "counter"  are  2,  4 and 6  for  32 bit.  Valid  values for
	"counter" are 1, 2, 3, 4, 5 and 6 for 16  bit. Returns  parameter
	out  of range  error if  the counter  value  is  invalid. Returns
	invalid pointer error if val is NULL, else returns success.

	  calling sequence:

	    GetCounterConstant(ptr, counter, val);

	     where:
		  ptr  - (structure  pointer)  This is a pointer  to  the
		  Configuration Block structure.

		  counter - (int)currently set counter.

		  val - (ULONG pointer)this points to the address of val.

	IPSTAT SetCounterConstant() - Set  the  counter  constant.  Valid
	values for "counter" are 2, 4 and 6 for 32 bit. Valid values  for
	"counter" are 1, 2, 3, 4, 5 and 6 for  16 bit. Returns  parameter
	out of range error if the counter  value is  invalid else returns
	success.

	  calling sequence:

	    SetCounterConstant(ptr, counter, val);

	     where:
		  ptr  - (structure  pointer)  This is a pointer  to  the
		  Configuration Block structure.

		  counter - (int)currently set counter.

		  val - (ULONG)this is the value to be stored.


				   10





	IPSTAT WriteCounterConstant() -  Write  a  value to  the  counter
	constant register. Valid values for "counter" are 2, 4 and 6  for
	32 bit. Valid values for "counter" are 1, 2, 3, 4, 5 and 6 for 16
	bit. Returns parameter out of range error if the counter value is
	invalid else returns success.

	  calling sequence:

	    WriteCounterConstant(ptr, counter);

	     where:
		  ptr  - (structure  pointer)  This is a pointer  to  the
		  Configuration Block structure.

		  counter - (int)currently set counter.

	IPSTAT GetMode() - The  current  value is  placed  at the address
	specified  by  mode. Valid  values  for "counter"  are 2, 4 and 6
	for 32  bit.  Valid values  for "counter" are 1, 2, 3, 4, 5 and 6
	for 16 bit. Returns parameter  out of range  error if the counter
	value is invalid. Returns Invalid pointer if 'mode' is NULL, else
	returns success.

	  calling sequence:

	    GetMode(ptr, counter, mode);

	     where:
		  ptr  - (structure  pointer)  This is a pointer  to  the
		  Configuration Block structure.

		  counter - (int)currently set counter.

		  mode - (byte pointer)this points to the address of mode.

	IPSTAT SetMode(); - Valid values for "counter" are 2, 4 and 6 for
	32 bit. Valid values for "counter" are 1, 2, 3, 4, 5 and 6 for 16
	bit. Valid values for "mode" are 0 thru 7. Returns  parameter out
	of  range error if the 'counter' or 'mode' value is invalid, else
	returns success.

	  calling sequence:

	    SetMode(ptr, counter, mode);

	     where:
		  ptr  - (structure  pointer)  This is a pointer  to  the
		  Configuration Block structure.

		  counter - (int)currently set counter.

		  mode - (byte)this is the mode to be stored.








				   11





	IPSTAT GetDebounce() - The current value is placed at the address
	specified by debounce. Valid  values  for "counter"  is 2  for 32
	bit. Valid values  for "counter"  are 1 and 2 for 16 bit. Returns
	parameter  out of  range error if  the counter  value is invalid.
	Returns  Invalid  pointer  if 'debounce'  is NULL,  else  returns
	success.

	  calling sequence:

	    GetDebounce(ptr, counter, debounce);

	     where:
		  ptr  - (structure  pointer)  This is a pointer  to  the
		  Configuration Block structure.

		  counter - (int)currently set counter.

		  debounce - (BOOL pointer)this points to the address  of
		  debounce.


	IPSTAT SetDebounce() - Valid values  for "counter"  is 2  for  32
	bit.  Valid  values for  "counter" are  1 and 2 for 16 bit. Valid
	values  for "debounce"  are  0 and  1. Returns  parameter  out of
	range error if the 'counter' or 'debounce' value is invalid, else
	returns success.

	  calling sequence:

	    Setdebounce(ptr, counter, debounce);

	     where:
		  ptr  - (structure  pointer)  This is a pointer  to  the
		  Configuration Block structure.

		  counter - (int)currently set counter.

		  debounce - (BOOL)this is the value to be stored.

	IPSTAT GetInterruptEnable() - The  current value is placed at the
	address specified by enable. Valid values for "counter"  are 2, 4
	and 6 for 32 bit. Valid  values for  "counter"  are 1, 2, 3, 4, 5
	and 6 for 16 bit.  Returns parameter  out of  range error  if the
	counter value is invalid. Returns Invalid pointer  if 'enable' is
	NULL, else returns success.

	  calling sequence:

	    GetInterruptEnable(ptr, counter, enable);

	     where:
		  ptr  - (structure  pointer)  This is a pointer  to  the
		  Configuration Block structure.

		  counter - (int)currently set counter.

		  enable - (BOOL pointer) this  points to the address  of
		  enable.


				   12





	IPSTAT SetInterruptEnable() - Bit 0 set in  this register enables
	the corresponding counter  interrupt. Valid  values for "counter"
	are 2, 4  and 6  for 32 bit. Valid values for "counter" are 1, 2,
	3, 4, 5 and 6 for 16 bit. Returns parameter out of range error if
	the 'counter' or 'enable' values are invalid.

	  calling sequence:

	    SetInterruptEnable(ptr, counter, enable);

	     where:
		  ptr  - (structure  pointer)  This is a pointer  to  the
		  Configuration Block structure.

		  counter - (int)currently set counter.

		  enable - (BOOL)this is the value to be stored.

	IPSTAT GetCounterSize() - Valid  values  for  "counter"  are 1, 2
	and 3  for 32 bit.  Valid values for  "counter" are 1, 2, 3, 4, 5
	and 6 for  16 bit. Returns  parameter  out of range error  if the
	'counter' value is invalid. The  current value  is placed  at the
	address specified by 'size'. Returns Invalid pointer if 'size' is
	NULL, else returns success.

	  calling sequence:

	    GetCounterSize(ptr, counter, size);

	     where:
		  ptr  - (structure  pointer)  This is a pointer  to  the
		  Configuration Block structure.

		  counter - (int)currently set counter.

		  size - (BOOL pointer)this points to the address of size.

	IPSTAT SetCounterSize() - Valid values for "counter" are 2, 4 and
	6 for 32 bit. Valid values for "counter" are 1, 2, 3, 4, 5  and 6
	for 16 bit. Returns parameter out of range error if the 'counter'
	or 'size' values are invalid.

	  calling sequence:

	    SetCounterSize(ptr, counter, size);

	     where:
		  ptr  - (structure  pointer)  This is a pointer  to  the
		  Configuration Block structure.

		  counter - (int)currently set counter.

		  size - (BOOL)this is the value to be stored.







				   13





	IPSTAT GetClockSource() - Valid values for "counter" are 2, 4 and
	6 for 32 bit. Valid values for "counter" are 1, 2, 3, 4, 5  and 6
	for 16 bit. Returns parameter out of range error if the 'counter'
	value is invalid. The  current  value  is placed  at the  address
	specified  by 'source'.  Returns  Invalid  pointer if 'source' is
	NULL, else returns success.

	  calling sequence:

	    GetClockSource(ptr, counter, source);

	     where:
		  ptr  - (structure  pointer)  This is a pointer  to  the
		  Configuration Block structure.

		  counter - (int)currently set counter.

		  source - (byte pointer) this points  to the  address of
		  source.

	IPSTAT SetClockSource() - Valid values for "counter" are 2, 4 and
	6 for 32 bit. Valid values for "counter" are 1, 2, 3, 4, 5  and 6
	for 16 bit. Returns parameter out of range error if the 'counter'
	value is invalid. Returns  parameter  out of  range error  if the
	source value is invalid else returns success.

	  calling sequence:

	    SetClockSource(ptr, counter, source);

	     where:
		  ptr  - (structure  pointer)  This is a pointer  to  the
		  Configuration Block structure.

		  counter - (int)currently set counter.

		  source - (byte)this is the value to be stored.

	IPSTAT GetTriggerSource() - Valid values  for "counter"  are 2, 4
	and 6 for 32 bit. Valid  values  for "counter"  are 1, 2, 3, 4, 5
	and 6  for 16 bit.  Returns parameter  out of range  error if the
	'trigger'  value is  invalid.  The current value is placed at the
	address  specified  by  'trigger'.  Returns  Invalid  pointer  if
	'trigger' is NULL, else returns success.

	  calling sequence:

	    GetTriggerSource(ptr, counter, trigger);

	     where:
		  ptr  - (structure  pointer)  This is a pointer  to  the
		  Configuration Block structure.

		  counter - (int)currently set counter.

		  trigger - (byte pointer) this points  to the address of
		  trigger.



				   14





	IPSTAT SetTriggerSource() - Valid values  for "counter" are  2, 4
	and 6  for 32  bit. Valid  values for "counter" are 1, 2, 3, 4, 5
	and 6 for 16 bit.  Returns parameter  out of  range error  if the
	'counter' value  is invalid. Returns parameter out of range error
	if the trigger value is invalid else returns success.

	  calling sequence:

	    SetTriggerSource(ptr, counter, trigger);

	     where:
		  ptr  - (structure  pointer)  This is a pointer  to  the
		  Configuration Block structure.

		  counter - (int)currently set counter.

		  trigger - (byte)this is the value to be stored.

	IPSTAT GetWatchdogLoad() - Bit  0 set  in a register  enables the
	corresponding external watchdog load. Valid values  for "counter"
	are 2, 4 and 6 for 32 bit. Valid  values for  "counter" are 1, 2,
	3, 4, 5 and 6 for 16 bit. Returns parameter out of range error if
	the 'counter' value  is invalid.  The current  value is placed at
	the address  specified by load. Returns Invalid pointer if 'load'
	is NULL, else returns success.

	  calling sequence:

	    GetWatchdogLoad(ptr, counter, load);

	     where:
		  ptr  - (structure  pointer)  This is a pointer  to  the
		  Configuration Block structure.

		  counter - (int)currently set counter.

		  load - (BOOL pointer)this points to the address of load.

	IPSTAT SetWatchdogLoad() - Bit 0 set  in a register  enables  the
	corresponding external watchdog load. Valid  values for "counter"
	are 2, 4 and 6 for 32  bit. Valid values  for "counter" are 1, 2,
	3, 4, 5 and 6 for 16 bit. Returns parameter out of range error if
	the 'counter' or 'load' value are invalid else returns success.

	  calling sequence:

	    SetWatchdogLoad(ptr, counter, load);

	     where:
		  ptr  - (structure  pointer)  This is a pointer  to  the
		  Configuration Block structure.

		  counter - (int)currently set counter.

		  load - (BOOL)this is the value to be stored.





				   15





	IPSTAT GetOutputPolarity() - Bit 0 set in a register enables the
	active LOW output polarity. Valid values for "counter" are 2, 4
	and 6 for 32 bit. Valid values for "counter" are 1, 2, 3, 4, 5
	and 6 for 16 bit. Returns parameter out of range error if the
	'counter' value is invalid. The current value is placed at the
	address specified by polarity. Returns Invalid pointer if
	'polarity' is NULL, else returns success.

	  calling sequence:

	    GetOutputPolarity(ptr, counter, polarity);

	     where:
		  ptr  - (structure  pointer)  This is a pointer  to  the
		  Configuration Block structure.

		  counter - (int)currently set counter.

		  polarity - (BOOL pointer)this points to the address  of
		  polarity.

	IPSTAT SetOutputPolarity() - Bit 0 set in a register  enables the
	active LOW output  polarity. Valid values for "counter"  are 2, 4
	and 6 for 32  bit.  Valid values  for "counter" are 1, 2, 3, 4, 5
	and 6 for  16 bit. Returns  parameter out  of range  error if the
	'counter' or  polarity  values are  invalid else returns success.

	  calling sequence:

	    SetOutputPolarity(ptr, counter, polarity);

	     where:
		  ptr  - (structure  pointer)  This is a pointer  to  the
		  Configuration Block structure.

		  counter - (int)currently set counter.

		  polarity - (BOOL)this is the value to be stored.

	IPSTAT GetInputPolarity() - Bit 0  set in a register enables  the
	active  LOW input  polarity. Valid values  for "counter" are 2, 4
	and 6 for  32 bit. Valid  values for  "counter" are 1, 2, 3, 4, 5
	and 6  for 16 bit. Returns  parameter  out of range  error if the
	'counter'  value is  invalid. The  current value is placed at the
	address  specified  by  polarity.  Returns   Invalid  pointer  if
	'polarity' is NULL, else returns success.

	  calling sequence:

	    GetInputPolarity(ptr, counter, polarity);

	     where:
		  ptr  - (structure  pointer)  This is a pointer  to  the
		  Configuration Block structure.

		  counter - (int)currently set counter.

		  polarity - (BOOL pointer)points to address of polarity.


				    16






	IPSTAT SetInputPolarity() - Set the values  of the input polarity
	registers.  Bit 0 set  in a register enables the active LOW input
	polarity. Returns  parameter out of  range error  if the polarity
	value is invalid else returns success. Returns Invalid pointer if
	'polarity' is NULL, else returns success.

	  calling sequence:

	    SetInputPolarity(ptr, counter, polarity);

	     where:
		  ptr  - (structure  pointer)  This is a pointer  to  the
		  Configuration Block structure.

		  counter - (int)currently set counter.

		  polarity - (BOOL)this is the value to be stored.

	IPSTAT StopCounter() - disables a counter timer. Valid values for
	"counter" are 2, 4 and 6 for 32 bit. Valid values for "counter"
	are 1, 2, 3, 4, 5 and 6 for 16 bit. Returns parameter out of range
	error if the counter value is invalid else returns success.

	  calling sequence:

	    StopCounter(ptr, counter);

	     where:
		  ptr  - (structure  pointer)  This is a pointer  to  the
		  Configuration Block structure.

		  counter - (int)currently set counter.

	IPSTAT DisableInterrupt() - disables only timer interrupts. Valid
	values for "counter" are 2, 4 and 6 for 32 bit. Valid  values for
	"counter" are 1, 2, 3, 4, 5 and 6 for  16 bit.  Returns parameter
	out of range error  if the counter  value is invalid else returns
	success.

	  calling sequence:

	    DisableInterrupt(ptr, counter);

	     where:
		  ptr  - (structure  pointer)  This is a pointer  to  the
		  Configuration Block structure.

		  counter - (int)currently set counter.

	IPSTAT StartCounter()- Starts one counter timer. Valid values for
	"counter"  are 2, 4 and 6 for 32 bit.  Valid values for "counter"
	are 1, 2,3, 4, 5 and 6 for 16 bit. Returns parameter out of range
	error if the counter value is invalid else returns success.






				   17





	  calling sequence:

	    StartCounter(ptr, counter);

	     where:
		  ptr  - (structure  pointer)  This is a pointer  to  the
		  Configuration Block structure.

		  counter - (int)currently set counter.

	IPSTAT StartSimultaneousCounters() -  Starts  one  counter,   any
	combination, or all counter timers. Bit mask of counters to start
	bit5 ... bit0 Returns success.

	   calling sequence:

	    StartSimutaneousCounters(ptr, mask);

	     where:
		  ptr  - (structure  pointer)  This is a pointer  to  the
		  Configuration Block structure.

		  mask - (byte)contains mask for which counters to trigger.


	IPSTAT ConfigureCounterTimer() -  This  routine  will  build  the
	control word from the configuration  block and then write it into
	the appropriate register. Valid values for "counter" are 2, 4 and
	6 for 32 bit.  Valid values for  "counter" are 1, 2,3, 4, 5 and 6
	for 16 bit. Returns  parameter  out of range error if the counter
	value is invalid else returns success.

	  calling sequence:

	    ConfigureCounterTimer(ptr, counter);

	     where:
		  ptr  - (structure  pointer)  This is a pointer  to  the
		  Configuration Block structure.

		  counter - (int)currently set counter.



















				   18





	rmid480.c - This  module  is  used to  perform  the  read  status
	function for the  ip480 board.  A  pointer to  the  Configuration
	Block will be passed  to this  routine.  The routine  will  use a
	pointer within the  Configuration Block  together with offsets to
	reference the registers on the Board and will transfer the status
	information from the Board to the Configuration Block.

	  calling sequence:

	     void = rmid480(c_blk);

	     where:
		  ptr  - (structure  pointer)  This is a pointer  to  the
		  Configuration Block structure.


	8. Description of Support Programs

	Following  is  a  description of the support  files  and  program
	modules  which  provide  examples  for  the  use  of  the library
	programs.

	apc8620.c - This  file   provides   carrier   support   routines.

	drvr480.c  - This  is a program which demonstrates the  usage  of
	the library modules.   This program is menu driven and allows the
	user to become familiar with the  IP480  board  and  the  library
	software.   The user may,  through menu  selections,   configure,
	read from, and write to the board.































				   19

